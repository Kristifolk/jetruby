#Задание 2 lesson-5-class_CashMachine (Нумерация lesson-5 с учетом первой лекции с GIT)

Урок 4. Задание #2
Исходный код
https://gist.github.com/AlxGolubev/b30af07fe3a0add200d1c693ac64133f
Пользователь запускает программу и отвечает на вопрос, с каким ресурсом он хочет взаимодействовать
- После чего он может передать тип запроса GET/POST/PUT/DELETE
    - GET index - должен возвращать все посты из памяти и их индекс в массиве (прим. 0. Hello World \n 1. Hello (again))
    - GET show - должен запрашивать идентификатор поста и показывать пост по переданному идентификатору (как в index только 1 пост)
    - POST create - должен запрашивать текст поста, добавлять его в массив постов и возвращать в ответ идентификатор поста и сам пост
    - PUT update - должен запрашивать идентификатор поста, потом новый текст поста и заменить его. В результате выводить пост (как в экшене index)
    - DELETE destroy - должен запрашивать идентификатор поста, затем удалять его из массива постов
Нужно реализовать логику для PostsController
В отчете по заданию расписать, понимание работы класса Router, причины, по которым используется extend для модуля Resource
В случае неправильного ввода (команды), ваша программа должна выдать соответствующее сообщение об ошибке, которое говорит клиенту, как ее исправить. Нельзя просто выводить "Error!" - это не поможет.


Класс Router
Код позволяет реализовать простую систему маршрутизации для нашего приложения.

Интерфейс
Пользователю задается вопрос: Выберите ресурс, с которым хотите взаимодействовать (1 - Posts, 2 - Comments, q - Exit)
При пользовательском вводе 2 (2 - Comments) логика не реализована
При пользовательском вводе q (q - Exit) сообщение 'Good bye!' и выход.
При пользовательском вводе 1(1 - Posts) пользователю задается еще вопрос:  
Выберите глагол для взаимодействия с ресурсами (GET/POST/PUT/DELETE) / q для выхода.
Если GET, еще вопрос index/show. 
В зависимости от пользовательского ввода можно посмотреть все посты или конкретный по id поста, изменить конкретный пост, добавить новый пост или удалить пост.

Реализация
В методе initialize создается пустой хэш @routes, который будет наполнятся resources. 
В методе init вызываем метод resources с аргументами (PostsController, 'posts').
Так же в методе init создан бесконечный цикл вывода сообщения с выбором: 
1 - Posts, 2 - Comments, q - Exit и выходом из цикла при вводе пользователем q.
В перемнной choise сохраняем ввод пользователя:
При пользовательском вводе 1(1 - Posts) вызов метода connection. Метод connection из модуля Resource подключен методом extend в класс PostsController(доступен классу, а не экземплярам класса)
Метод connection() принимает в качестве аргумента маршрут, по которому нужно подключиться (@routes['posts']).
При пользовательском вводе 2 (2 - Comments) логика не реализована
При пользовательском вводе q (q - Exit) сообщение 'Good bye!' и выход.
Метод resources с аргументами(klass, keyword):
Создаем controller экземпляр класса PostsController. 
И наполняем хэш @routes. Ключи это GET(index/show)/POST/PUT/DELETE - ввод пользователя. Значения index/show/create/update/destroy это ссылки на методы, которые получаем спомощью controller.method()
Логика ввода GET(index/show)/POST/PUT/DELETE реализованна в модуле Resource,который подключается в класс PostsController)
В самом классе PostsController реализованна логика работы методов index/show/create/update/destroy

